// Code generated by mockery v2.53.0. DO NOT EDIT.

package snowflake

import mock "github.com/stretchr/testify/mock"

// MockidProvider is an autogenerated mock type for the idProvider type
type MockidProvider struct {
	mock.Mock
}

type MockidProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockidProvider) EXPECT() *MockidProvider_Expecter {
	return &MockidProvider_Expecter{mock: &_m.Mock}
}

// NextID provides a mock function with no fields
func (_m *MockidProvider) NextID() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NextID")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockidProvider_NextID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextID'
type MockidProvider_NextID_Call struct {
	*mock.Call
}

// NextID is a helper method to define mock.On call
func (_e *MockidProvider_Expecter) NextID() *MockidProvider_NextID_Call {
	return &MockidProvider_NextID_Call{Call: _e.mock.On("NextID")}
}

func (_c *MockidProvider_NextID_Call) Run(run func()) *MockidProvider_NextID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockidProvider_NextID_Call) Return(_a0 uint64, _a1 error) *MockidProvider_NextID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockidProvider_NextID_Call) RunAndReturn(run func() (uint64, error)) *MockidProvider_NextID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockidProvider creates a new instance of MockidProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockidProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockidProvider {
	mock := &MockidProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
