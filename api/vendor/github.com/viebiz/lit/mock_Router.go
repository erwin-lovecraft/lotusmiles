// Code generated by mockery v2.53.0. DO NOT EDIT.

package lit

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockRouter is an autogenerated mock type for the Router type
type MockRouter struct {
	mock.Mock
}

type MockRouter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRouter) EXPECT() *MockRouter_Expecter {
	return &MockRouter_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: relativePath, handler, middleware
func (_m *MockRouter) Delete(relativePath string, handler HandlerFunc, middleware ...HandlerFunc) Route {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, relativePath, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 Route
	if rf, ok := ret.Get(0).(func(string, HandlerFunc, ...HandlerFunc) Route); ok {
		r0 = rf(relativePath, handler, middleware...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Route)
		}
	}

	return r0
}

// MockRouter_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRouter_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - relativePath string
//   - handler HandlerFunc
//   - middleware ...HandlerFunc
func (_e *MockRouter_Expecter) Delete(relativePath interface{}, handler interface{}, middleware ...interface{}) *MockRouter_Delete_Call {
	return &MockRouter_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{relativePath, handler}, middleware...)...)}
}

func (_c *MockRouter_Delete_Call) Run(run func(relativePath string, handler HandlerFunc, middleware ...HandlerFunc)) *MockRouter_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HandlerFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(HandlerFunc)
			}
		}
		run(args[0].(string), args[1].(HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockRouter_Delete_Call) Return(_a0 Route) *MockRouter_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Delete_Call) RunAndReturn(run func(string, HandlerFunc, ...HandlerFunc) Route) *MockRouter_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: relativePath, handler, middleware
func (_m *MockRouter) Get(relativePath string, handler HandlerFunc, middleware ...HandlerFunc) Route {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, relativePath, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 Route
	if rf, ok := ret.Get(0).(func(string, HandlerFunc, ...HandlerFunc) Route); ok {
		r0 = rf(relativePath, handler, middleware...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Route)
		}
	}

	return r0
}

// MockRouter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRouter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - relativePath string
//   - handler HandlerFunc
//   - middleware ...HandlerFunc
func (_e *MockRouter_Expecter) Get(relativePath interface{}, handler interface{}, middleware ...interface{}) *MockRouter_Get_Call {
	return &MockRouter_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{relativePath, handler}, middleware...)...)}
}

func (_c *MockRouter_Get_Call) Run(run func(relativePath string, handler HandlerFunc, middleware ...HandlerFunc)) *MockRouter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HandlerFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(HandlerFunc)
			}
		}
		run(args[0].(string), args[1].(HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockRouter_Get_Call) Return(_a0 Route) *MockRouter_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Get_Call) RunAndReturn(run func(string, HandlerFunc, ...HandlerFunc) Route) *MockRouter_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Group provides a mock function with given fields: prefix, routerFunc, middleware
func (_m *MockRouter) Group(prefix string, routerFunc func(Router), middleware ...HandlerFunc) Router {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, prefix, routerFunc)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 Router
	if rf, ok := ret.Get(0).(func(string, func(Router), ...HandlerFunc) Router); ok {
		r0 = rf(prefix, routerFunc, middleware...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Router)
		}
	}

	return r0
}

// MockRouter_Group_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Group'
type MockRouter_Group_Call struct {
	*mock.Call
}

// Group is a helper method to define mock.On call
//   - prefix string
//   - routerFunc func(Router)
//   - middleware ...HandlerFunc
func (_e *MockRouter_Expecter) Group(prefix interface{}, routerFunc interface{}, middleware ...interface{}) *MockRouter_Group_Call {
	return &MockRouter_Group_Call{Call: _e.mock.On("Group",
		append([]interface{}{prefix, routerFunc}, middleware...)...)}
}

func (_c *MockRouter_Group_Call) Run(run func(prefix string, routerFunc func(Router), middleware ...HandlerFunc)) *MockRouter_Group_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HandlerFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(HandlerFunc)
			}
		}
		run(args[0].(string), args[1].(func(Router)), variadicArgs...)
	})
	return _c
}

func (_c *MockRouter_Group_Call) Return(_a0 Router) *MockRouter_Group_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Group_Call) RunAndReturn(run func(string, func(Router), ...HandlerFunc) Router) *MockRouter_Group_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function with given fields: method, relativePath, handler, middleware
func (_m *MockRouter) Handle(method string, relativePath string, handler HandlerFunc, middleware ...HandlerFunc) Route {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, method, relativePath, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 Route
	if rf, ok := ret.Get(0).(func(string, string, HandlerFunc, ...HandlerFunc) Route); ok {
		r0 = rf(method, relativePath, handler, middleware...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Route)
		}
	}

	return r0
}

// MockRouter_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockRouter_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - method string
//   - relativePath string
//   - handler HandlerFunc
//   - middleware ...HandlerFunc
func (_e *MockRouter_Expecter) Handle(method interface{}, relativePath interface{}, handler interface{}, middleware ...interface{}) *MockRouter_Handle_Call {
	return &MockRouter_Handle_Call{Call: _e.mock.On("Handle",
		append([]interface{}{method, relativePath, handler}, middleware...)...)}
}

func (_c *MockRouter_Handle_Call) Run(run func(method string, relativePath string, handler HandlerFunc, middleware ...HandlerFunc)) *MockRouter_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HandlerFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(HandlerFunc)
			}
		}
		run(args[0].(string), args[1].(string), args[2].(HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockRouter_Handle_Call) Return(_a0 Route) *MockRouter_Handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Handle_Call) RunAndReturn(run func(string, string, HandlerFunc, ...HandlerFunc) Route) *MockRouter_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// Handler provides a mock function with no fields
func (_m *MockRouter) Handler() http.Handler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func() http.Handler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// MockRouter_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type MockRouter_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
func (_e *MockRouter_Expecter) Handler() *MockRouter_Handler_Call {
	return &MockRouter_Handler_Call{Call: _e.mock.On("Handler")}
}

func (_c *MockRouter_Handler_Call) Run(run func()) *MockRouter_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRouter_Handler_Call) Return(_a0 http.Handler) *MockRouter_Handler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Handler_Call) RunAndReturn(run func() http.Handler) *MockRouter_Handler_Call {
	_c.Call.Return(run)
	return _c
}

// Head provides a mock function with given fields: relativePath, handler, middleware
func (_m *MockRouter) Head(relativePath string, handler HandlerFunc, middleware ...HandlerFunc) Route {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, relativePath, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Head")
	}

	var r0 Route
	if rf, ok := ret.Get(0).(func(string, HandlerFunc, ...HandlerFunc) Route); ok {
		r0 = rf(relativePath, handler, middleware...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Route)
		}
	}

	return r0
}

// MockRouter_Head_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Head'
type MockRouter_Head_Call struct {
	*mock.Call
}

// Head is a helper method to define mock.On call
//   - relativePath string
//   - handler HandlerFunc
//   - middleware ...HandlerFunc
func (_e *MockRouter_Expecter) Head(relativePath interface{}, handler interface{}, middleware ...interface{}) *MockRouter_Head_Call {
	return &MockRouter_Head_Call{Call: _e.mock.On("Head",
		append([]interface{}{relativePath, handler}, middleware...)...)}
}

func (_c *MockRouter_Head_Call) Run(run func(relativePath string, handler HandlerFunc, middleware ...HandlerFunc)) *MockRouter_Head_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HandlerFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(HandlerFunc)
			}
		}
		run(args[0].(string), args[1].(HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockRouter_Head_Call) Return(_a0 Route) *MockRouter_Head_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Head_Call) RunAndReturn(run func(string, HandlerFunc, ...HandlerFunc) Route) *MockRouter_Head_Call {
	_c.Call.Return(run)
	return _c
}

// Match provides a mock function with given fields: methods, relativePath, handler, middleware
func (_m *MockRouter) Match(methods []string, relativePath string, handler HandlerFunc, middleware ...HandlerFunc) Route {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, methods, relativePath, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 Route
	if rf, ok := ret.Get(0).(func([]string, string, HandlerFunc, ...HandlerFunc) Route); ok {
		r0 = rf(methods, relativePath, handler, middleware...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Route)
		}
	}

	return r0
}

// MockRouter_Match_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Match'
type MockRouter_Match_Call struct {
	*mock.Call
}

// Match is a helper method to define mock.On call
//   - methods []string
//   - relativePath string
//   - handler HandlerFunc
//   - middleware ...HandlerFunc
func (_e *MockRouter_Expecter) Match(methods interface{}, relativePath interface{}, handler interface{}, middleware ...interface{}) *MockRouter_Match_Call {
	return &MockRouter_Match_Call{Call: _e.mock.On("Match",
		append([]interface{}{methods, relativePath, handler}, middleware...)...)}
}

func (_c *MockRouter_Match_Call) Run(run func(methods []string, relativePath string, handler HandlerFunc, middleware ...HandlerFunc)) *MockRouter_Match_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HandlerFunc, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(HandlerFunc)
			}
		}
		run(args[0].([]string), args[1].(string), args[2].(HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockRouter_Match_Call) Return(_a0 Route) *MockRouter_Match_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Match_Call) RunAndReturn(run func([]string, string, HandlerFunc, ...HandlerFunc) Route) *MockRouter_Match_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function with given fields: relativePath, handler, middleware
func (_m *MockRouter) Options(relativePath string, handler HandlerFunc, middleware ...HandlerFunc) Route {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, relativePath, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 Route
	if rf, ok := ret.Get(0).(func(string, HandlerFunc, ...HandlerFunc) Route); ok {
		r0 = rf(relativePath, handler, middleware...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Route)
		}
	}

	return r0
}

// MockRouter_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type MockRouter_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
//   - relativePath string
//   - handler HandlerFunc
//   - middleware ...HandlerFunc
func (_e *MockRouter_Expecter) Options(relativePath interface{}, handler interface{}, middleware ...interface{}) *MockRouter_Options_Call {
	return &MockRouter_Options_Call{Call: _e.mock.On("Options",
		append([]interface{}{relativePath, handler}, middleware...)...)}
}

func (_c *MockRouter_Options_Call) Run(run func(relativePath string, handler HandlerFunc, middleware ...HandlerFunc)) *MockRouter_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HandlerFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(HandlerFunc)
			}
		}
		run(args[0].(string), args[1].(HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockRouter_Options_Call) Return(_a0 Route) *MockRouter_Options_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Options_Call) RunAndReturn(run func(string, HandlerFunc, ...HandlerFunc) Route) *MockRouter_Options_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: relativePath, handler, middleware
func (_m *MockRouter) Patch(relativePath string, handler HandlerFunc, middleware ...HandlerFunc) Route {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, relativePath, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 Route
	if rf, ok := ret.Get(0).(func(string, HandlerFunc, ...HandlerFunc) Route); ok {
		r0 = rf(relativePath, handler, middleware...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Route)
		}
	}

	return r0
}

// MockRouter_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockRouter_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - relativePath string
//   - handler HandlerFunc
//   - middleware ...HandlerFunc
func (_e *MockRouter_Expecter) Patch(relativePath interface{}, handler interface{}, middleware ...interface{}) *MockRouter_Patch_Call {
	return &MockRouter_Patch_Call{Call: _e.mock.On("Patch",
		append([]interface{}{relativePath, handler}, middleware...)...)}
}

func (_c *MockRouter_Patch_Call) Run(run func(relativePath string, handler HandlerFunc, middleware ...HandlerFunc)) *MockRouter_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HandlerFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(HandlerFunc)
			}
		}
		run(args[0].(string), args[1].(HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockRouter_Patch_Call) Return(_a0 Route) *MockRouter_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Patch_Call) RunAndReturn(run func(string, HandlerFunc, ...HandlerFunc) Route) *MockRouter_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Post provides a mock function with given fields: relativePath, handler, middleware
func (_m *MockRouter) Post(relativePath string, handler HandlerFunc, middleware ...HandlerFunc) Route {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, relativePath, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 Route
	if rf, ok := ret.Get(0).(func(string, HandlerFunc, ...HandlerFunc) Route); ok {
		r0 = rf(relativePath, handler, middleware...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Route)
		}
	}

	return r0
}

// MockRouter_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type MockRouter_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - relativePath string
//   - handler HandlerFunc
//   - middleware ...HandlerFunc
func (_e *MockRouter_Expecter) Post(relativePath interface{}, handler interface{}, middleware ...interface{}) *MockRouter_Post_Call {
	return &MockRouter_Post_Call{Call: _e.mock.On("Post",
		append([]interface{}{relativePath, handler}, middleware...)...)}
}

func (_c *MockRouter_Post_Call) Run(run func(relativePath string, handler HandlerFunc, middleware ...HandlerFunc)) *MockRouter_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HandlerFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(HandlerFunc)
			}
		}
		run(args[0].(string), args[1].(HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockRouter_Post_Call) Return(_a0 Route) *MockRouter_Post_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Post_Call) RunAndReturn(run func(string, HandlerFunc, ...HandlerFunc) Route) *MockRouter_Post_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: relativePath, handler, middleware
func (_m *MockRouter) Put(relativePath string, handler HandlerFunc, middleware ...HandlerFunc) Route {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, relativePath, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 Route
	if rf, ok := ret.Get(0).(func(string, HandlerFunc, ...HandlerFunc) Route); ok {
		r0 = rf(relativePath, handler, middleware...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Route)
		}
	}

	return r0
}

// MockRouter_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockRouter_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - relativePath string
//   - handler HandlerFunc
//   - middleware ...HandlerFunc
func (_e *MockRouter_Expecter) Put(relativePath interface{}, handler interface{}, middleware ...interface{}) *MockRouter_Put_Call {
	return &MockRouter_Put_Call{Call: _e.mock.On("Put",
		append([]interface{}{relativePath, handler}, middleware...)...)}
}

func (_c *MockRouter_Put_Call) Run(run func(relativePath string, handler HandlerFunc, middleware ...HandlerFunc)) *MockRouter_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HandlerFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(HandlerFunc)
			}
		}
		run(args[0].(string), args[1].(HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockRouter_Put_Call) Return(_a0 Route) *MockRouter_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Put_Call) RunAndReturn(run func(string, HandlerFunc, ...HandlerFunc) Route) *MockRouter_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Route provides a mock function with given fields: prefix, middleware
func (_m *MockRouter) Route(prefix string, middleware ...HandlerFunc) Router {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, prefix)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Route")
	}

	var r0 Router
	if rf, ok := ret.Get(0).(func(string, ...HandlerFunc) Router); ok {
		r0 = rf(prefix, middleware...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Router)
		}
	}

	return r0
}

// MockRouter_Route_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Route'
type MockRouter_Route_Call struct {
	*mock.Call
}

// Route is a helper method to define mock.On call
//   - prefix string
//   - middleware ...HandlerFunc
func (_e *MockRouter_Expecter) Route(prefix interface{}, middleware ...interface{}) *MockRouter_Route_Call {
	return &MockRouter_Route_Call{Call: _e.mock.On("Route",
		append([]interface{}{prefix}, middleware...)...)}
}

func (_c *MockRouter_Route_Call) Run(run func(prefix string, middleware ...HandlerFunc)) *MockRouter_Route_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(HandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockRouter_Route_Call) Return(_a0 Router) *MockRouter_Route_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Route_Call) RunAndReturn(run func(string, ...HandlerFunc) Router) *MockRouter_Route_Call {
	_c.Call.Return(run)
	return _c
}

// Routes provides a mock function with no fields
func (_m *MockRouter) Routes() RoutesInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Routes")
	}

	var r0 RoutesInfo
	if rf, ok := ret.Get(0).(func() RoutesInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RoutesInfo)
		}
	}

	return r0
}

// MockRouter_Routes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Routes'
type MockRouter_Routes_Call struct {
	*mock.Call
}

// Routes is a helper method to define mock.On call
func (_e *MockRouter_Expecter) Routes() *MockRouter_Routes_Call {
	return &MockRouter_Routes_Call{Call: _e.mock.On("Routes")}
}

func (_c *MockRouter_Routes_Call) Run(run func()) *MockRouter_Routes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRouter_Routes_Call) Return(_a0 RoutesInfo) *MockRouter_Routes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Routes_Call) RunAndReturn(run func() RoutesInfo) *MockRouter_Routes_Call {
	_c.Call.Return(run)
	return _c
}

// StaticFS provides a mock function with given fields: relativePath, fs
func (_m *MockRouter) StaticFS(relativePath string, fs http.FileSystem) Route {
	ret := _m.Called(relativePath, fs)

	if len(ret) == 0 {
		panic("no return value specified for StaticFS")
	}

	var r0 Route
	if rf, ok := ret.Get(0).(func(string, http.FileSystem) Route); ok {
		r0 = rf(relativePath, fs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Route)
		}
	}

	return r0
}

// MockRouter_StaticFS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StaticFS'
type MockRouter_StaticFS_Call struct {
	*mock.Call
}

// StaticFS is a helper method to define mock.On call
//   - relativePath string
//   - fs http.FileSystem
func (_e *MockRouter_Expecter) StaticFS(relativePath interface{}, fs interface{}) *MockRouter_StaticFS_Call {
	return &MockRouter_StaticFS_Call{Call: _e.mock.On("StaticFS", relativePath, fs)}
}

func (_c *MockRouter_StaticFS_Call) Run(run func(relativePath string, fs http.FileSystem)) *MockRouter_StaticFS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.FileSystem))
	})
	return _c
}

func (_c *MockRouter_StaticFS_Call) Return(_a0 Route) *MockRouter_StaticFS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_StaticFS_Call) RunAndReturn(run func(string, http.FileSystem) Route) *MockRouter_StaticFS_Call {
	_c.Call.Return(run)
	return _c
}

// StaticFileFS provides a mock function with given fields: relativePath, filepath, fs
func (_m *MockRouter) StaticFileFS(relativePath string, filepath string, fs http.FileSystem) Route {
	ret := _m.Called(relativePath, filepath, fs)

	if len(ret) == 0 {
		panic("no return value specified for StaticFileFS")
	}

	var r0 Route
	if rf, ok := ret.Get(0).(func(string, string, http.FileSystem) Route); ok {
		r0 = rf(relativePath, filepath, fs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Route)
		}
	}

	return r0
}

// MockRouter_StaticFileFS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StaticFileFS'
type MockRouter_StaticFileFS_Call struct {
	*mock.Call
}

// StaticFileFS is a helper method to define mock.On call
//   - relativePath string
//   - filepath string
//   - fs http.FileSystem
func (_e *MockRouter_Expecter) StaticFileFS(relativePath interface{}, filepath interface{}, fs interface{}) *MockRouter_StaticFileFS_Call {
	return &MockRouter_StaticFileFS_Call{Call: _e.mock.On("StaticFileFS", relativePath, filepath, fs)}
}

func (_c *MockRouter_StaticFileFS_Call) Run(run func(relativePath string, filepath string, fs http.FileSystem)) *MockRouter_StaticFileFS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(http.FileSystem))
	})
	return _c
}

func (_c *MockRouter_StaticFileFS_Call) Return(_a0 Route) *MockRouter_StaticFileFS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_StaticFileFS_Call) RunAndReturn(run func(string, string, http.FileSystem) Route) *MockRouter_StaticFileFS_Call {
	_c.Call.Return(run)
	return _c
}

// Use provides a mock function with given fields: middlewares
func (_m *MockRouter) Use(middlewares ...HandlerFunc) {
	_va := make([]interface{}, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockRouter_Use_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Use'
type MockRouter_Use_Call struct {
	*mock.Call
}

// Use is a helper method to define mock.On call
//   - middlewares ...HandlerFunc
func (_e *MockRouter_Expecter) Use(middlewares ...interface{}) *MockRouter_Use_Call {
	return &MockRouter_Use_Call{Call: _e.mock.On("Use",
		append([]interface{}{}, middlewares...)...)}
}

func (_c *MockRouter_Use_Call) Run(run func(middlewares ...HandlerFunc)) *MockRouter_Use_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HandlerFunc, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(HandlerFunc)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockRouter_Use_Call) Return() *MockRouter_Use_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Use_Call) RunAndReturn(run func(...HandlerFunc)) *MockRouter_Use_Call {
	_c.Run(run)
	return _c
}

// NewMockRouter creates a new instance of MockRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRouter {
	mock := &MockRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
