// Code generated by mockery v2.52.2. DO NOT EDIT.

package postgres

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// MockQueryExecutor is an autogenerated mock type for the QueryExecutor type
type MockQueryExecutor struct {
	mock.Mock
}

type MockQueryExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryExecutor) EXPECT() *MockQueryExecutor_Expecter {
	return &MockQueryExecutor_Expecter{mock: &_m.Mock}
}

// Prepare provides a mock function with given fields: query
func (_m *MockQueryExecutor) Prepare(query string) (*sql.Stmt, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for Prepare")
	}

	var r0 *sql.Stmt
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*sql.Stmt, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) *sql.Stmt); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Stmt)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryExecutor_Prepare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prepare'
type MockQueryExecutor_Prepare_Call struct {
	*mock.Call
}

// Prepare is a helper method to define mock.On call
//   - query string
func (_e *MockQueryExecutor_Expecter) Prepare(query interface{}) *MockQueryExecutor_Prepare_Call {
	return &MockQueryExecutor_Prepare_Call{Call: _e.mock.On("Prepare", query)}
}

func (_c *MockQueryExecutor_Prepare_Call) Run(run func(query string)) *MockQueryExecutor_Prepare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockQueryExecutor_Prepare_Call) Return(_a0 *sql.Stmt, _a1 error) *MockQueryExecutor_Prepare_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryExecutor_Prepare_Call) RunAndReturn(run func(string) (*sql.Stmt, error)) *MockQueryExecutor_Prepare_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: query, args
func (_m *MockQueryExecutor) Query(query string, args ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (*sql.Rows, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Rows); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryExecutor_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockQueryExecutor_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *MockQueryExecutor_Expecter) Query(query interface{}, args ...interface{}) *MockQueryExecutor_Query_Call {
	return &MockQueryExecutor_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{query}, args...)...)}
}

func (_c *MockQueryExecutor_Query_Call) Run(run func(query string, args ...interface{})) *MockQueryExecutor_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockQueryExecutor_Query_Call) Return(_a0 *sql.Rows, _a1 error) *MockQueryExecutor_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryExecutor_Query_Call) RunAndReturn(run func(string, ...interface{}) (*sql.Rows, error)) *MockQueryExecutor_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function with given fields: query, args
func (_m *MockQueryExecutor) QueryRow(query string, args ...interface{}) *sql.Row {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 *sql.Row
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Row); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	return r0
}

// MockQueryExecutor_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockQueryExecutor_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *MockQueryExecutor_Expecter) QueryRow(query interface{}, args ...interface{}) *MockQueryExecutor_QueryRow_Call {
	return &MockQueryExecutor_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{query}, args...)...)}
}

func (_c *MockQueryExecutor_QueryRow_Call) Run(run func(query string, args ...interface{})) *MockQueryExecutor_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockQueryExecutor_QueryRow_Call) Return(_a0 *sql.Row) *MockQueryExecutor_QueryRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryExecutor_QueryRow_Call) RunAndReturn(run func(string, ...interface{}) *sql.Row) *MockQueryExecutor_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryExecutor creates a new instance of MockQueryExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryExecutor {
	mock := &MockQueryExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
