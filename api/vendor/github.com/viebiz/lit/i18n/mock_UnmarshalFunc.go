// Code generated by mockery v2.53.0. DO NOT EDIT.

package i18n

import mock "github.com/stretchr/testify/mock"

// MockUnmarshalFunc is an autogenerated mock type for the UnmarshalFunc type
type MockUnmarshalFunc struct {
	mock.Mock
}

type MockUnmarshalFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnmarshalFunc) EXPECT() *MockUnmarshalFunc_Expecter {
	return &MockUnmarshalFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: data, v
func (_m *MockUnmarshalFunc) Execute(data []byte, v interface{}) error {
	ret := _m.Called(data, v)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, interface{}) error); ok {
		r0 = rf(data, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUnmarshalFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockUnmarshalFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - data []byte
//   - v interface{}
func (_e *MockUnmarshalFunc_Expecter) Execute(data interface{}, v interface{}) *MockUnmarshalFunc_Execute_Call {
	return &MockUnmarshalFunc_Execute_Call{Call: _e.mock.On("Execute", data, v)}
}

func (_c *MockUnmarshalFunc_Execute_Call) Run(run func(data []byte, v interface{})) *MockUnmarshalFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(interface{}))
	})
	return _c
}

func (_c *MockUnmarshalFunc_Execute_Call) Return(_a0 error) *MockUnmarshalFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUnmarshalFunc_Execute_Call) RunAndReturn(run func([]byte, interface{}) error) *MockUnmarshalFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUnmarshalFunc creates a new instance of MockUnmarshalFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUnmarshalFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUnmarshalFunc {
	mock := &MockUnmarshalFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
