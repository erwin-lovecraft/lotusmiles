// Code generated by mockery v2.53.0. DO NOT EDIT.

package i18n

import mock "github.com/stretchr/testify/mock"

// MockMessageBundle is an autogenerated mock type for the MessageBundle type
type MockMessageBundle struct {
	mock.Mock
}

type MockMessageBundle_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageBundle) EXPECT() *MockMessageBundle_Expecter {
	return &MockMessageBundle_Expecter{mock: &_m.Mock}
}

// GetLocalize provides a mock function with given fields: langKey
func (_m *MockMessageBundle) GetLocalize(langKey string) Localizable {
	ret := _m.Called(langKey)

	if len(ret) == 0 {
		panic("no return value specified for GetLocalize")
	}

	var r0 Localizable
	if rf, ok := ret.Get(0).(func(string) Localizable); ok {
		r0 = rf(langKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Localizable)
		}
	}

	return r0
}

// MockMessageBundle_GetLocalize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocalize'
type MockMessageBundle_GetLocalize_Call struct {
	*mock.Call
}

// GetLocalize is a helper method to define mock.On call
//   - langKey string
func (_e *MockMessageBundle_Expecter) GetLocalize(langKey interface{}) *MockMessageBundle_GetLocalize_Call {
	return &MockMessageBundle_GetLocalize_Call{Call: _e.mock.On("GetLocalize", langKey)}
}

func (_c *MockMessageBundle_GetLocalize_Call) Run(run func(langKey string)) *MockMessageBundle_GetLocalize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMessageBundle_GetLocalize_Call) Return(_a0 Localizable) *MockMessageBundle_GetLocalize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageBundle_GetLocalize_Call) RunAndReturn(run func(string) Localizable) *MockMessageBundle_GetLocalize_Call {
	_c.Call.Return(run)
	return _c
}

// LoadMessageFile provides a mock function with given fields: path, langKey, ext
func (_m *MockMessageBundle) LoadMessageFile(path string, langKey string, ext string) error {
	ret := _m.Called(path, langKey, ext)

	if len(ret) == 0 {
		panic("no return value specified for LoadMessageFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(path, langKey, ext)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageBundle_LoadMessageFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadMessageFile'
type MockMessageBundle_LoadMessageFile_Call struct {
	*mock.Call
}

// LoadMessageFile is a helper method to define mock.On call
//   - path string
//   - langKey string
//   - ext string
func (_e *MockMessageBundle_Expecter) LoadMessageFile(path interface{}, langKey interface{}, ext interface{}) *MockMessageBundle_LoadMessageFile_Call {
	return &MockMessageBundle_LoadMessageFile_Call{Call: _e.mock.On("LoadMessageFile", path, langKey, ext)}
}

func (_c *MockMessageBundle_LoadMessageFile_Call) Run(run func(path string, langKey string, ext string)) *MockMessageBundle_LoadMessageFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMessageBundle_LoadMessageFile_Call) Return(_a0 error) *MockMessageBundle_LoadMessageFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageBundle_LoadMessageFile_Call) RunAndReturn(run func(string, string, string) error) *MockMessageBundle_LoadMessageFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageBundle creates a new instance of MockMessageBundle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageBundle(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageBundle {
	mock := &MockMessageBundle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
